---


# Kubeadm configure.
- name: images config
  command: "kubeadm config images pull"
  become: yes
  register: exit

# Allow acces from workers  
- name: acces from workers  
  firewalld:
    rich_rule: rule family=ipv4 source address="{{ item }}" accept
    permanent: true
    state: enabled
  with_items:
    - 10.0.1.11/16
    - 10.0.1.12/16
  become: yes

# Reload config.
- firewalld:
    masquerade: yes
    state: enabled
    permanent: yes
  become: yes

# Allow containers access to localhost  
- name:
  firewalld:
    zone: public
    rich_rule: rule family=ipv4 source address=172.17.0.0/16 accept
    permanent: true
    state: enabled
  become: yes
    

# Installing CNI plugin and save it in kubeadmExit.
- name: images config
  command: "kubeadm init --pod-network-cidr 10.1.1.0/16 --ignore-preflight-errors=all"
  become: yes
  register: kubeadmExit

# saving kubeadm init into a new file
- name: Creating an empty file
  file:
    path: "/home/ansible/kubeadmFile.txt"
    state: touch
  become: yes

- name: Creating a file with content
  copy:
    dest: "/home/ansible/kubeadmFile.txt"
    content: "{{ kubeadmExit.stdout }}"
  become: yes

# new variable with last 2 lines of kubeadm init output
- name: Echo the output kubeadmExit variable vaule last line
  shell: "cat /home/ansible/kubeadmFile.txt |tail -2"
  register: kubeadmExit2lines

# saving kubeadm init output 2 lines into a new file token.txt
- name: Creating an empty file
  file:
    path: "/home/ansible/token.txt"
    state: touch
  become: yes

- name: Creating a file with content
  copy:
    dest: "/home/ansible/token.txt"
    content: "{{ kubeadmExit2lines.stdout }}"
  become: yes

# Removing \n character 
- name: Ansible replace string 
  replace:
    path:  "/home/ansible/token.txt"
    regexp: "\\\n   "
  become: yes

- name: Echo the output token file vaule
  shell: cat /home/ansible/token.txt
  register: kubeadmExit2
   
- debug: msg="{{kubeadmExit2.stdout}}"

# create a dummy host with new variable with the token
- name: Register dummy host with variable
  add_host:
    name: "DUMMY_HOST"
    PLAY1VAR_NEW: "{{kubeadmExit2.stdout}}"

# Allow root user to acces into the cluster
- name: create a directory if it does not exist
  file:
    path: "/root/.kube"
    state: directory
    mode: '0755'
  become: yes

- name: Authorize user cluster access
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/root/.kube/config"
    owner: root
    group: root
    mode: '0644'
    remote_src: yes
  become: yes
  when: ansible_os_family == 'RedHat'

- name: Change kubeconfig file permission
  file:
    path: /root/.kube/config 
    owner: root
    group: root
  become: yes 