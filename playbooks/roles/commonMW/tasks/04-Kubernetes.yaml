---

# Kubernetes repository config
- name: Kubernetes trafic management
  copy:
    src: "{{ item }}"
    dest: "/etc/yum.repos.d/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  become: yes
  when: ansible_os_family == 'RedHat'
  with_items:
      - "kubernetes.repo"

# installing kubernetes
- name: installing kubernetes
  dnf:
    name: 
     - kubelet 
     - kubeadm 
     - kubectl
    state: present
  become: yes

# Starting kubelet
- name: Starting kubelet
  systemd:
    name: kubelet
    state: started
    enabled: yes
    masked: no
    daemon_reload: yes
  become: yes

# Reload config.
- firewalld:
    masquerade: yes
    state: enabled
    permanent: yes
  become: yes

# Firewall config in order to access kubernetes services.
- name: Opening ports
  firewalld: 
    port: "{{ item }}"
    permanent: yes
    state: enabled
  with_items:
   - 6443/tcp
   - 2379-2380/tcp
   - 10250/tcp
   - 10251/tcp
   - 10252/tcp
   - 10255/tcp
  become: yes

# Kubeadm configure.
- name: images config
  command: "kubeadm config images pull"
  become: yes
  register: exit

# Allow acces from workers  
- name: acces from workers  
  firewalld:
    rich_rule: rule family=ipv4 source address="{{ item }}" accept
    permanent: true
    state: enabled
  with_items:
    - 10.0.1.11/16
    - 10.0.1.12/16
  become: yes

# Reload config.
- firewalld:
    masquerade: yes
    state: enabled
    permanent: yes
  become: yes

# Installing CNI plugin.
- name: images config
  command: "kubeadm init --pod-network-cidr 10.0.1.0/24 --ignore-preflight-errors=all"
  become: yes

# Allow containers access to localhost  
- name:
  firewalld:
    zone: public
    rich_rule: rule family=ipv4 source address=172.17.0.0/1 accept
    permanent: true
    state: enabled
  become: yes
    

# Installing CNI plugin and save it in kubeadmExit.
- name: images config
  command: "kubeadm init --pod-network-cidr 10.1.1.0/24 --ignore-preflight-errors=all"
  become: yes
  register: kubeadmExit

- name: Creating an empty file
  file:
    path: "/home/ansible/kubeadmFile.txt"
    state: touch
  become: yes

- name: Creating a file with content
  copy:
    dest: "/home/ansible/kubeadmFile.txt"
    content: "{{ kubeadmExit.stdout }}"
  become: yes

- name: Echo the output kubeadmExit variable vaule last line
  shell: cat /home/ansible/kubeadmFile.txt |tail -2
  register: kubeadmExit2lines

- name: Creating an empty file
  file:
    path: "/home/ansible/token.txt"
    state: touch
  become: yes

- name: Creating a file with content
  copy:
    dest: "/home/ansible/token.txt"
    content: "{{ kubeadmExit2lines.stdout }}"
  become: yes

- name: Ansible replace string 
  replace:
    path:  "/home/ansible/token.txt"
    regexp: "{{ item }}"
    replace: "  "
  with_items:
    - "\\"
    - "\n"
  become: yes

- name: Echo the output token file vaule
  shell: cat /home/ansible/token.txt
  register: kubeadmExit2
   
- debug: msg="{{kubeadmExit2.stdout}}"

- name: Register dummy host with variable
  add_host:
    name: "DUMMY_HOST"
    PLAY1VAR_NEW: "{{ kubeadmExit2.stdout }}"

# Allow root user to acces into the cluster
- name: create a directory if it does not exist
  file:
    path: "/root/.kube"
    state: directory
    mode: '0755'
  become: yes

- name: Authorize user cluster access
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/root/.kube/config"
    owner: root
    group: root
    mode: '0644'
    remote_src: yes
  become: yes
  when: ansible_os_family == 'RedHat'

- name: Change kubeconfig file permission
  file:
    path: /root/.kube/config 
    owner: root
    group: root
  become: yes 